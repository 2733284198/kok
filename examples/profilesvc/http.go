// Code generated by kok; DO NOT EDIT.
// github.com/RussellLuo/kok

package profilesvc

import (
	"context"
	"net/http"

	httpcodec "github.com/RussellLuo/kok/pkg/codec/http"
	"github.com/go-chi/chi"
	kithttp "github.com/go-kit/kit/transport/http"
)

func NewHTTPRouter(svc Service, codecs httpcodec.Codecs) chi.Router {
	r := chi.NewRouter()

	var options []kithttp.ServerOption
	var codec httpcodec.Codec

	codec = codecs.EncodeDecoder("DeleteAddress")
	r.Method(
		"DELETE", "/profiles/{id}/addresses/{addressID}",
		kithttp.NewServer(
			MakeEndpointOfDeleteAddress(svc),
			decodeDeleteAddressRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("DeleteProfile")
	r.Method(
		"DELETE", "/profiles/{id}",
		kithttp.NewServer(
			MakeEndpointOfDeleteProfile(svc),
			decodeDeleteProfileRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetAddress")
	r.Method(
		"GET", "/profiles/{id}/addresses/{addressID}",
		kithttp.NewServer(
			MakeEndpointOfGetAddress(svc),
			decodeGetAddressRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetAddresses")
	r.Method(
		"GET", "/profiles/{id}/addresses",
		kithttp.NewServer(
			MakeEndpointOfGetAddresses(svc),
			decodeGetAddressesRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("GetProfile")
	r.Method(
		"GET", "/profiles/{id}",
		kithttp.NewServer(
			MakeEndpointOfGetProfile(svc),
			decodeGetProfileRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("PatchProfile")
	r.Method(
		"PATCH", "/profiles/{id}",
		kithttp.NewServer(
			MakeEndpointOfPatchProfile(svc),
			decodePatchProfileRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("PostAddress")
	r.Method(
		"POST", "/profiles/{id}/addresses",
		kithttp.NewServer(
			MakeEndpointOfPostAddress(svc),
			decodePostAddressRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("PostProfile")
	r.Method(
		"POST", "/profiles",
		kithttp.NewServer(
			MakeEndpointOfPostProfile(svc),
			decodePostProfileRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	codec = codecs.EncodeDecoder("PutProfile")
	r.Method(
		"PUT", "/profiles/{id}",
		kithttp.NewServer(
			MakeEndpointOfPutProfile(svc),
			decodePutProfileRequest(codec),
			httpcodec.MakeResponseEncoder(codec, 200),
			append(options,
				kithttp.ServerErrorEncoder(httpcodec.MakeErrorEncoder(codec)),
			)...,
		),
	)

	return r
}

func decodeDeleteAddressRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		profileIDValue := chi.URLParam(r, "id")
		var profileID string
		if err := codec.DecodeRequestParam("profileID", profileIDValue, &profileID); err != nil {
			return nil, err
		}

		addressIDValue := chi.URLParam(r, "addressID")
		var addressID string
		if err := codec.DecodeRequestParam("addressID", addressIDValue, &addressID); err != nil {
			return nil, err
		}

		return &DeleteAddressRequest{
			ProfileID: profileID,
			AddressID: addressID,
		}, nil
	}
}

func decodeDeleteProfileRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		idValue := chi.URLParam(r, "id")
		var id string
		if err := codec.DecodeRequestParam("id", idValue, &id); err != nil {
			return nil, err
		}

		return &DeleteProfileRequest{
			Id: id,
		}, nil
	}
}

func decodeGetAddressRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		profileIDValue := chi.URLParam(r, "id")
		var profileID string
		if err := codec.DecodeRequestParam("profileID", profileIDValue, &profileID); err != nil {
			return nil, err
		}

		addressIDValue := chi.URLParam(r, "addressID")
		var addressID string
		if err := codec.DecodeRequestParam("addressID", addressIDValue, &addressID); err != nil {
			return nil, err
		}

		return &GetAddressRequest{
			ProfileID: profileID,
			AddressID: addressID,
		}, nil
	}
}

func decodeGetAddressesRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		idValue := chi.URLParam(r, "id")
		var id string
		if err := codec.DecodeRequestParam("id", idValue, &id); err != nil {
			return nil, err
		}

		return &GetAddressesRequest{
			Id: id,
		}, nil
	}
}

func decodeGetProfileRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		idValue := chi.URLParam(r, "id")
		var id string
		if err := codec.DecodeRequestParam("id", idValue, &id); err != nil {
			return nil, err
		}

		return &GetProfileRequest{
			Id: id,
		}, nil
	}
}

func decodePatchProfileRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		idValue := chi.URLParam(r, "id")
		var id string
		if err := codec.DecodeRequestParam("id", idValue, &id); err != nil {
			return nil, err
		}

		var body struct {
			Profile Profile `json:"profile"`
		}
		if err := codec.DecodeRequestBody(r.Body, &body); err != nil {
			return nil, err
		}

		return &PatchProfileRequest{
			Id:      id,
			Profile: body.Profile,
		}, nil
	}
}

func decodePostAddressRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		profileIDValue := chi.URLParam(r, "id")
		var profileID string
		if err := codec.DecodeRequestParam("profileID", profileIDValue, &profileID); err != nil {
			return nil, err
		}

		var body struct {
			Address Address `json:"address"`
		}
		if err := codec.DecodeRequestBody(r.Body, &body); err != nil {
			return nil, err
		}

		return &PostAddressRequest{
			ProfileID: profileID,
			Address:   body.Address,
		}, nil
	}
}

func decodePostProfileRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		var body struct {
			Profile Profile `json:"profile"`
		}
		if err := codec.DecodeRequestBody(r.Body, &body); err != nil {
			return nil, err
		}

		return &PostProfileRequest{
			Profile: body.Profile,
		}, nil
	}
}

func decodePutProfileRequest(codec httpcodec.Codec) kithttp.DecodeRequestFunc {
	return func(_ context.Context, r *http.Request) (interface{}, error) {
		idValue := chi.URLParam(r, "id")
		var id string
		if err := codec.DecodeRequestParam("id", idValue, &id); err != nil {
			return nil, err
		}

		var body struct {
			Profile Profile `json:"profile"`
		}
		if err := codec.DecodeRequestBody(r.Body, &body); err != nil {
			return nil, err
		}

		return &PutProfileRequest{
			Id:      id,
			Profile: body.Profile,
		}, nil
	}
}
