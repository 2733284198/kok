// Code generated by kok; DO NOT EDIT.
// github.com/RussellLuo/kok

package profilesvc

import (
	"context"

	"github.com/go-kit/kit/endpoint"
)

type DeleteAddressRequest struct {
	ProfileID string `json:"profile_id"`
	AddressID string `json:"address_id"`
}

type DeleteAddressResponse struct {
	Err error `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *DeleteAddressResponse) Failed() error { return r.Err }

// MakeEndpointOfDeleteAddress creates the endpoint for s.DeleteAddress.
func MakeEndpointOfDeleteAddress(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteAddressRequest)
		err := s.DeleteAddress(
			ctx,
			req.ProfileID,
			req.AddressID,
		)
		return &DeleteAddressResponse{
			Err: err,
		}, nil
	}
}

type DeleteProfileRequest struct {
	Id string `json:"id"`
}

type DeleteProfileResponse struct {
	Out1 error `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *DeleteProfileResponse) Failed() error { return r.Out1 }

// MakeEndpointOfDeleteProfile creates the endpoint for s.DeleteProfile.
func MakeEndpointOfDeleteProfile(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*DeleteProfileRequest)
		out1 := s.DeleteProfile(
			ctx,
			req.Id,
		)
		return &DeleteProfileResponse{
			Out1: out1,
		}, nil
	}
}

type GetAddressRequest struct {
	ProfileID string `json:"profile_id"`
	AddressID string `json:"address_id"`
}

type GetAddressResponse struct {
	Address Address `json:"address"`
	Err     error   `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *GetAddressResponse) Failed() error { return r.Err }

// MakeEndpointOfGetAddress creates the endpoint for s.GetAddress.
func MakeEndpointOfGetAddress(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetAddressRequest)
		address, err := s.GetAddress(
			ctx,
			req.ProfileID,
			req.AddressID,
		)
		return &GetAddressResponse{
			Address: address,
			Err:     err,
		}, nil
	}
}

type GetAddressesRequest struct {
	Id string `json:"id"`
}

type GetAddressesResponse struct {
	Addresses []Address `json:"addresses"`
	Err       error     `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *GetAddressesResponse) Failed() error { return r.Err }

// MakeEndpointOfGetAddresses creates the endpoint for s.GetAddresses.
func MakeEndpointOfGetAddresses(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetAddressesRequest)
		addresses, err := s.GetAddresses(
			ctx,
			req.Id,
		)
		return &GetAddressesResponse{
			Addresses: addresses,
			Err:       err,
		}, nil
	}
}

type GetProfileRequest struct {
	Id string `json:"id"`
}

type GetProfileResponse struct {
	Profile Profile `json:"profile"`
	Err     error   `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *GetProfileResponse) Failed() error { return r.Err }

// MakeEndpointOfGetProfile creates the endpoint for s.GetProfile.
func MakeEndpointOfGetProfile(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*GetProfileRequest)
		profile, err := s.GetProfile(
			ctx,
			req.Id,
		)
		return &GetProfileResponse{
			Profile: profile,
			Err:     err,
		}, nil
	}
}

type PatchProfileRequest struct {
	Id      string  `json:"id"`
	Profile Profile `json:"profile"`
}

type PatchProfileResponse struct {
	Err error `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *PatchProfileResponse) Failed() error { return r.Err }

// MakeEndpointOfPatchProfile creates the endpoint for s.PatchProfile.
func MakeEndpointOfPatchProfile(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PatchProfileRequest)
		err := s.PatchProfile(
			ctx,
			req.Id,
			req.Profile,
		)
		return &PatchProfileResponse{
			Err: err,
		}, nil
	}
}

type PostAddressRequest struct {
	ProfileID string  `json:"profile_id"`
	A         Address `json:"a"`
}

type PostAddressResponse struct {
	Err error `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *PostAddressResponse) Failed() error { return r.Err }

// MakeEndpointOfPostAddress creates the endpoint for s.PostAddress.
func MakeEndpointOfPostAddress(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PostAddressRequest)
		err := s.PostAddress(
			ctx,
			req.ProfileID,
			req.A,
		)
		return &PostAddressResponse{
			Err: err,
		}, nil
	}
}

type PostProfileRequest struct {
	Profile Profile `json:"profile"`
}

type PostProfileResponse struct {
	Err error `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *PostProfileResponse) Failed() error { return r.Err }

// MakeEndpointOfPostProfile creates the endpoint for s.PostProfile.
func MakeEndpointOfPostProfile(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PostProfileRequest)
		err := s.PostProfile(
			ctx,
			req.Profile,
		)
		return &PostProfileResponse{
			Err: err,
		}, nil
	}
}

type PutProfileRequest struct {
	Id      string  `json:"id"`
	Profile Profile `json:"profile"`
}

type PutProfileResponse struct {
	Err error `json:"-"`
}

// Failed implements endpoint.Failer.
func (r *PutProfileResponse) Failed() error { return r.Err }

// MakeEndpointOfPutProfile creates the endpoint for s.PutProfile.
func MakeEndpointOfPutProfile(s Service) endpoint.Endpoint {
	return func(ctx context.Context, request interface{}) (interface{}, error) {
		req := request.(*PutProfileRequest)
		err := s.PutProfile(
			ctx,
			req.Id,
			req.Profile,
		)
		return &PutProfileResponse{
			Err: err,
		}, nil
	}
}
